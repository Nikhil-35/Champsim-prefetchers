//
// From Data Prefetching Championship Simulator 2
// Seth Pugsley, seth.h.pugsley@intel.com
//

/*

  This file describes an Instruction Pointer-based (Program Counter-based) stride prefetcher.  
  The prefetcher detects stride patterns coming from the same IP, and then 
  prefetches additional cache lines.

  Prefetches are issued into the L2 or LLC depending on L2 MSHR occupancy.

 */

#include "cache.h"

#define IP_TRACKER_COUNT 4096

class IP_TRACKER {
  public:
    // the IP we're tracking
    uint64_t ip;

    // the last address accessed by this IP
    uint64_t last_cl_addr;

    // the stride between the last two addresses accessed by this IP
    int64_t last_stride;

    // use LRU to evict old IP trackers2
    uint32_t lru;

    int8_t conf1;
    int8_t conf2;

    uint8_t last_stride2;

    IP_TRACKER () {
        ip = 0;
        last_cl_addr = 0;
        last_stride = 0;
        last_stride2 = 0;
        lru = 0;
        conf1 = -1;
        conf2 = -1;
    };
};

IP_TRACKER trackers2[IP_TRACKER_COUNT];
uint64_t ghb_llc[NUM_CPUS][6];
uint8_t max_llc[NUM_CPUS][6];
uint8_t levels_llc[NUM_CPUS][6][64];
uint8_t max_llc_present[NUM_CPUS][6];
uint8_t max_index_llc[NUM_CPUS][6];
void check_for_stream_llc( uint64_t cl_addr, uint8_t cpu){

        for( int i=0; i<6; i++){
        if( cl_addr > ghb_llc[cpu][i] && cl_addr - ghb_llc[cpu][i] <= 32){
                levels_llc[cpu][i][cl_addr - ghb_llc[cpu][i]+31]++;
                if( levels_llc[cpu][i][cl_addr - ghb_llc[cpu][i]+31] > max_llc[cpu][i] ){
                        max_llc[cpu][i] = levels_llc[cpu][i][cl_addr - ghb_llc[cpu][i]+31];
                        max_index_llc[cpu][i] = cl_addr - ghb_llc[cpu][i]+31;
                }
        }
        else if ( cl_addr < ghb_llc[cpu][i] && ghb_llc[cpu][i] - cl_addr <= 31 ){
                int k = ghb_llc[cpu][i] - cl_addr;
                k = k*-1;
                levels_llc[cpu][i][k+31]++;
                if( levels_llc[cpu][i][k+31] > max_llc[cpu][i] ){
                        max_llc[cpu][i] = levels_llc[cpu][i][k+31];
                        max_index_llc[cpu][i] = cl_addr - ghb_llc[cpu][i]+31;
                }

        }

}
}
void reset_llc(){
       for( int c = 0; c < NUM_CPUS; c++){

                for( int i=0; i < 6; i++){
                        max_llc_present[c][i] = max_llc[c][i];
                }
        }

        for( int c = 0; c < NUM_CPUS; c++){

                for( int i=0; i < 6; i++){
                        for( int j=0; j < 64; j++){
                                levels_llc[c][i][j] = 0;
                        }
                max_llc[c][i] = 1;
                max_index_llc[c][i] = i+31;
                }
        }
}

int round_llc = 0;
void CACHE::llc_prefetcher_initialize() 
{
    cout << "CPU " << cpu << " LLC IP-based stride prefetcher" << endl;
    for (int i=0; i<IP_TRACKER_COUNT; i++)
        trackers2[i].lru = i;
}

uint32_t CACHE::llc_prefetcher_operate(uint64_t addr, uint64_t ip, uint8_t cache_hit, uint8_t type, uint32_t metadata_in)
{

if( round_llc % 100 == 0 ) reset_llc();
                round_llc ++;
   if( round_llc == 1 ){
                       for( int c = 0; c < NUM_CPUS; c++){

                for( int i=0; i < 6; i++){
                        max_llc_present[c][i] = i+31+1;
                }
        }

   }
    // check for a tracker hit
    uint64_t cl_addr = addr >> LOG2_BLOCK_SIZE;
    uint8_t prefetch_degree = 4;
    if(pf_issued > 0 && pf_useful/pf_issued < 0.2){
        prefetch_degree--;
    }
    int index = -1; 
    for (index=0; index<IP_TRACKER_COUNT; index++) {
        if (trackers2[index].ip == ip)
            break;
    }

    // this is a new IP that doesn't have a tracker yet, so allocate one
    if (index == IP_TRACKER_COUNT) {

        for (index=0; index<IP_TRACKER_COUNT; index++) {
            if (trackers2[index].lru == (IP_TRACKER_COUNT-1))
                break;
        }

        trackers2[index].ip = ip;
        trackers2[index].last_cl_addr = cl_addr;
        trackers2[index].last_stride = 0;

        //cout << "[IP_STRIDE] MISS index: " << index << " lru: " << trackers2[index].lru << " ip: " << hex << ip << " cl_addr: " << cl_addr << dec << endl;

        for (int i=0; i<IP_TRACKER_COUNT; i++) {
            if (trackers2[i].lru < trackers2[index].lru)
                trackers2[i].lru++;
        }
        trackers2[index].lru = 0;

        return metadata_in;
    }

    // sanity check
    // at this point we should know a matching tracker index
    if (index == -1)
        assert(0);

    // calculate the stride between the current address and the last address
    // this bit appears overly complicated because we're calculating
    // differences between unsigned address variables
    int64_t stride = 0;
    if (cl_addr > trackers2[index].last_cl_addr)
        stride = cl_addr - trackers2[index].last_cl_addr;
    else {
        stride = trackers2[index].last_cl_addr - cl_addr;
        stride *= -1;
    }

    //cout << "[IP_STRIDE] HIT  index: " << index << " lru: " << trackers2[index].lru << " ip: " << hex << ip << " cl_addr: " << cl_addr << dec << " stride: " << stride << endl;

    // don't do anything if we somehow saw the same address twice in a row
    if (stride == 0)
        return metadata_in;

    // only do any prefetching if there's a pattern of seeing the same
    // stride more than once
    if (stride == trackers2[index].last_stride) {
        trackers2[index].conf1++;
        if(trackers2[index].conf1 >=2){
            trackers2[index].conf1 =2;
        }
        // do some prefetching
        if(trackers2[index].conf1 >= 0){

            for (int i=0; i<prefetch_degree; i++) {
                uint64_t pf_address = (cl_addr + (stride*(i+1))) << LOG2_BLOCK_SIZE;

                // only issue a prefetch if the prefetch address is in the same 4 KB page 
                // as the current demand access address
                if ((pf_address >> LOG2_PAGE_SIZE) != (addr >> LOG2_PAGE_SIZE))
                    break;

                // check the MSHR occupancy to decide if we're going to prefetch to the L2 or LLC
                //if (MSHR.occupancy < (MSHR.SIZE>>1))
            //prefetch_line(ip, addr, pf_address, FILL_L2, 0);
                //else
            prefetch_line(ip, addr, pf_address, FILL_LLC, 0);
            }
        }
    }
    else if(stride == trackers2[index].last_stride2){
        trackers2[index].conf2++;
        if(trackers2[index].conf2 >=2){
            trackers2[index].conf2 =2;
        }
        // do some prefetching
        if(trackers2[index].conf2 >= 0){

            for (int i=0; i<prefetch_degree; i++) {
                uint64_t pf_address = (cl_addr + (stride*(i+1))) << LOG2_BLOCK_SIZE;

                // only issue a prefetch if the prefetch address is in the same 4 KB page 
                // as the current demand access address
                if ((pf_address >> LOG2_PAGE_SIZE) != (addr >> LOG2_PAGE_SIZE))
                    break;

                // check the MSHR occupancy to decide if we're going to prefetch to the L2 or LLC
                //if (MSHR.occupancy < (MSHR.SIZE>>1))
            //prefetch_line(ip, addr, pf_address, FILL_L2, 0);
                //else
            prefetch_line(ip, addr, pf_address, FILL_LLC, 0);
            }
        }
    }
    else{
        trackers2[index].conf1--;
        trackers2[index].conf2--;
        if(trackers2[index].conf1 <= -2){
            trackers2[index].conf1 = 1;
            trackers2[index].last_stride = stride;
        }
        else if(trackers2[index].conf2 <= -2){
            trackers2[index].conf2 = 1;
            trackers2[index].last_stride2 = stride;
        }
   check_for_stream_llc( cl_addr, cpu);
 for( int i=0; i < 6; i++){                                        // MLOP
   uint64_t pf_address = ((addr>>LOG2_BLOCK_SIZE)+max_llc_present[cpu][i]-31) << LOG2_BLOCK_SIZE;
       PACKET* p;
   p = new PACKET();
   p->address = pf_address;
   p->full_addr = pf_address;
   int k = check_hit(p);
   if( k == -1 ){
                prefetch_line(ip, addr, pf_address, FILL_LLC, 0);
   }
           else{
                lru_update(get_set(pf_address), k);
    }
 }
}
        int ghb_index=0;
        for(ghb_index = 0; ghb_index < 6; ghb_index++)
        if(cl_addr == ghb_llc[cpu][ghb_index])
                break;
        // only update the GHB upon finding a new cl address
        if(ghb_index == 6){
                for(ghb_index= 5; ghb_index>0; ghb_index--)
                        ghb_llc[cpu][ghb_index] = ghb_llc[cpu][ghb_index-1];
                ghb_llc[cpu][0] = cl_addr;
        }

    trackers2[index].last_cl_addr = cl_addr;
    //trackers2[index].last_stride = stride;

    for (int i=0; i<IP_TRACKER_COUNT; i++) {
        if (trackers2[i].lru < trackers2[index].lru)
            trackers2[i].lru++;
    }
    trackers2[index].lru = 0;

    return metadata_in;
}

uint32_t CACHE::llc_prefetcher_cache_fill(uint64_t addr, uint32_t set, uint32_t way, uint8_t prefetch, uint64_t evicted_addr, uint32_t metadata_in)
{
  return metadata_in;
}

void CACHE::llc_prefetcher_final_stats()
{
    cout << "CPU " << cpu << " LLC PC-based stride prefetcher final stats" << endl;
}
